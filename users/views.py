from django.shortcuts import render
import time, requests, hmac, hashlib, uuid, json
from django.conf import settings
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.response import Response
from rest_framework import status
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.decorators import api_view
from django.http import JsonResponse
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
from drf_spectacular.utils import extend_schema
from .models import User
from .serializers import TelegramLoginSerializer, RegisterWithChatSerializer
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi


def send_message(chat_id, text):
    return requests.post(
        f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage",
        data={"chat_id": chat_id, "text": text}
    )


class TelegramLoginView(APIView):
    @swagger_auto_schema(
        manual_parameters=[
            openapi.Parameter('id', openapi.IN_QUERY, type=openapi.TYPE_INTEGER, required=True, description='Telegram ID'),
            openapi.Parameter('username', openapi.IN_QUERY, type=openapi.TYPE_STRING, required=True, description='Telegram username'),
            openapi.Parameter('first_name', openapi.IN_QUERY, type=openapi.TYPE_STRING, required=True, description='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            openapi.Parameter('hash', openapi.IN_QUERY, type=openapi.TYPE_STRING, required=True, description='Telegram hash'),
        ],
        responses={
            200: openapi.Response(description="–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", examples={"application/json": {"access": "jwt_access_token", "refresh": "jwt_refresh_token"}}),
            400: openapi.Response(description="–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        },
        operation_summary="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram (GET)",
        operation_description="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã."
    )
    def get(self, request):
        data = request.GET.copy()
        telegram_id = data.get("id")
        username = data.get("username")
        first_name = data.get("first_name")
        hash_ = data.get("hash")

        user, _ = User.objects.get_or_create(
            telegram_id=telegram_id,
            defaults={
                "username_telegram": username,
                "first_name": first_name,
                "username": f"tg_{telegram_id}",
            }
        )

        refresh = RefreshToken.for_user(user)
        return JsonResponse({
            "access": str(refresh.access_token),
            "refresh": str(refresh)
        })

    @swagger_auto_schema(
        request_body=TelegramLoginSerializer,
        responses={
            200: openapi.Response(description="–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", examples={"application/json": {"access": "jwt_access_token", "refresh": "jwt_refresh_token"}}),
            400: openapi.Response(description="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        },
        operation_summary="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram (POST)",
        operation_description="–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã."
    )
    def post(self, request):
        serializer = TelegramLoginSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        telegram_id = serializer.validated_data['id']
        username = serializer.validated_data['username']
        first_name = serializer.validated_data['first_name']

        user, _ = User.objects.get_or_create(
            telegram_id=telegram_id,
            defaults={
                "username_telegram": username,
                "first_name": first_name,
                "username": f"tg_{telegram_id}",
            }
        )

        refresh = RefreshToken.for_user(user)
        return Response({
            "access": str(refresh.access_token),
            "refresh": str(refresh)
        })


class ResendTelegramVerificationView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        responses={
            200: openapi.Response(description="–¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
            400: openapi.Response(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç chat_id"),
            401: openapi.Response(description="–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        },
        operation_summary="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        operation_description="–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Telegram."
    )
    def post(self, request):
        user = request.user

        if user.is_verified_by_telegram:
            return Response({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}, status=400)

        if not user.telegram_chat_id:
            return Response({'error': '–ù–µ —É–∫–∞–∑–∞–Ω chat_id'}, status=400)

        verification_command = f"/verify {user.telegram_verification_token}"
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.username or '–¥—Ä—É–≥'}!\n\n"
            f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç:"
        )

        payload = {
            "chat_id": user.telegram_chat_id,
            "text": message,
            "parse_mode": "Markdown",
            "reply_markup": {
                "inline_keyboard": [[
                    {"text": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": verification_command}
                ]]
            }
        }

        try:
            response = requests.post(
                f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage",
                json=payload
            )
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            return Response({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ", "details": str(e)}, status=500)

        return Response({"message": "–¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"}, status=200)


from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi

@method_decorator(csrf_exempt, name='dispatch')
class TelegramWebhookView(APIView):
    @swagger_auto_schema(
        operation_summary="Webhook –æ—Ç Telegram",
        operation_description=(
            "–≠—Ç–æ—Ç endpoint –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è Telegram Bot API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. "
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start, /verify <—Ç–æ–∫–µ–Ω>, /getid –∏ –¥—Ä—É–≥–∏–µ."
        ),
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'update_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                'message': openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'message_id': openapi.Schema(type=openapi.TYPE_INTEGER),
                        'chat': openapi.Schema(
                            type=openapi.TYPE_OBJECT,
                            properties={
                                'id': openapi.Schema(type=openapi.TYPE_INTEGER),
                                'type': openapi.Schema(type=openapi.TYPE_STRING),
                            }
                        ),
                        'text': openapi.Schema(type=openapi.TYPE_STRING),
                    },
                ),
            },
            required=['message']
        ),
        responses={
            200: openapi.Response(description="Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"),
        }
    )
    def post(self, request):
        print("üîî Webhook –ø–æ–ª—É—á–µ–Ω!")
        print(json.dumps(request.data, indent=2, ensure_ascii=False))

        data = request.data
        message = data.get("message", {})
        chat = message.get("chat", {})
        text = message.get("text", "")
        chat_id = chat.get("id")

        if not text:
            return JsonResponse({"ok": True})

        if text.startswith("/start"):
            try:
                user = User.objects.get(telegram_id=chat_id)
                user.telegram_chat_id = chat_id
                user.save()
                send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª.")
            except User.DoesNotExist:
                send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ù–æ —è —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é.")

        elif text.startswith("/verify"):
            parts = text.split()
            if len(parts) != 2:
                send_message(chat_id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /verify <—Ç–æ–∫–µ–Ω>")
                return JsonResponse({"ok": True})

            token = parts[1]
            try:
                uuid_token = uuid.UUID(token)
            except ValueError:
                send_message(chat_id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –≠—Ç–æ –Ω–µ UUID.")
                return JsonResponse({"ok": True})

            try:
                user = User.objects.get(telegram_verification_token=uuid_token)
                if str(user.telegram_chat_id) != str(chat_id):
                    send_message(chat_id, "‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
                    return JsonResponse({"ok": True})

                if user.is_verified_by_telegram:
                    send_message(chat_id, "‚úÖ –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç.")
                    return JsonResponse({"ok": True})

                user.is_verified_by_telegram = True
                user.save()
                send_message(chat_id, "‚úÖ Telegram-–∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

            except User.DoesNotExist:
                send_message(chat_id, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            return JsonResponse({"ok": True})

        elif text.startswith("/getid"):
            send_message(chat_id, f"üÜî –¢–≤–æ–π chat_id: {chat_id}")
        else:
            send_message(chat_id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start, /verify <—Ç–æ–∫–µ–Ω> –∏–ª–∏ /getid")

        return JsonResponse({"ok": True})


class MeView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(
        responses={
            200: openapi.Response(description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", examples={
                "application/json": {
                    "id": 1,
                    "username": "askat",
                    "telegram_id": 123456,
                    "telegram_chat_id": 987654,
                    "is_verified_by_telegram": True
                }
            }),
            401: openapi.Response(description="–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        },
        operation_summary="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        operation_description="–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (JWT —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)."
    )
    def get(self, request):
        user = request.user
        return Response({
            "id": user.id,
            "username": user.username,
            "telegram_id": user.telegram_id,
            "telegram_chat_id": user.telegram_chat_id,
            "is_verified_by_telegram": user.is_verified_by_telegram,
        })


class RegisterWithChatView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(
        request_body=RegisterWithChatSerializer,
        responses={
            201: openapi.Response(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, —Ç–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
            400: openapi.Response(description="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        },
        operation_summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å chat_id",
        operation_description="–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ Telegram."
    )
    def post(self, request):
        serializer = RegisterWithChatSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()

        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.username}!\n"
            f"–¢–≤–æ–π —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `{user.telegram_verification_token}`\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏: /verify {user.telegram_verification_token}"
        )

        try:
            requests.post(
                f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": user.telegram_chat_id,
                    "text": message,
                    "parse_mode": "Markdown"
                }
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram", e)

        return Response({
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω. –¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
            "user_id": user.id
        }, status=201)


@swagger_auto_schema(
    method='get',
    manual_parameters=[
        openapi.Parameter('token', openapi.IN_PATH, type=openapi.TYPE_STRING, description='UUID —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    ],
    responses={
        200: openapi.Response(description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω."),
        400: openapi.Response(description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
    },
    operation_summary="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω—É",
    operation_description="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º."
)
@api_view(['GET'])
def verify_telegram_token(request, token):
    try:
        user = User.objects.get(telegram_verification_token=token)

        if user.is_verified_by_telegram:
            return Response({"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"}, status=status.HTTP_200_OK)

        user.is_verified_by_telegram = True
        user.save()
        return Response({"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –£–°–ü–ï–®–ù–û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"}, status=status.HTTP_200_OK)

    except (ValueError, User.DoesNotExist):
        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)
